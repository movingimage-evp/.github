name: initial-action
on:
  push:
  workflow_dispatch:
    # input variables example
    inputs:
      name:
        description: 'deployTo'
        required: true
        default: 'QA'
      home:
        description: 'location'
        required: false
        default: 'Berlin'

env:
  APPLICATION_NAME: APPLICATION_NAME
  ARTIFACT_NAME: ARTIFACT_NAME
  CHART_PATH: CHART/PATH
  VALUES_PATH: VALUES/FILES/PATH
  CHART_MUSEUM_URL: https://charts.movingimage.com
jobs:
  set-variables:
    runs-on: ubuntu-latest
    outputs:
      ARTIFACT_VERSION: ${{ steps.set-artifact-version.outputs.ARTIFACT_VERSION }}
      SHORT_HASH: ${{ steps.set-short-commit-hash.outputs.SHORT_HASH }}
      FULL_IMAGE_NAME: ${{ steps.full-image-name.outputs.FULL_IMAGE_NAME }}
      NAMESPACE: ${{ steps.deploy_conf.outputs.NAMESPACE }}
      VALUES: ${{ steps.deploy_conf.outputs.VALUES }}
      RELEASE_NAME: ${{ steps.deploy_conf.outputs.RELEASE_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set short commit hash
        id: set-short-commit-hash
        run: |
          echo "::set-output name=SHORT_HASH::$(git rev-parse --short HEAD)"
      - name: Set artifact version
        id: set-artifact-version
        run: |
          echo "::set-output name=ARTIFACT_VERSION::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"
      - name: Set full image name
        id: full-image-name
        run: |
          echo "::set-output name=FULL_IMAGE_NAME::gh-${{ env.APPLICATION_NAME }}:${{ steps.set-artifact-version.outputs.ARTIFACT_VERSION }}-${{ steps.set-short-commit-hash.outputs.SHORT_HASH }}"
      - name: Set deploy configurations
        id: deploy_conf
        run: |
          branch=$(echo ${GITHUB_REF#refs/heads/})
          if [[ $branch == "master" ]]; then
            echo "::set-output name=NAMESPACE::PROD-NAMESPACE"
            echo "::set-output name=VALUES::{{ env.VALUES_PATH }}/PROD-VALUES-FILE"
            echo "::set-output name=RELEASE_NAME::PROD-RELEASE-NAME"
          elif [[ $branch == release\/* ]]; then
            echo "::set-output name=NAMESPACE::STG-NAMESPACE"
            echo "::set-output name=VALUES::{{ env.VALUES_PATH }}/STG-VALUES-FILE"
            echo "::set-output name=RELEASE_NAME::STG-RELEASE-NAME"
          else
            echo "::set-output name=NAMESPACE::QA-NAMESPACE"
            echo "::set-output name=VALUES::{{ env.VALUES_PATH }}/QA-VALUES-FILE"
            echo "::set-output name=RELEASE_NAME::QA-RELEASE-NAME"
          fi

  build-project:
    runs-on: ubuntu-latest
    needs: set-variables
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
          server-id: nexus
          server-username: NEXUS_USERNAME
          server-password: NEXUS_PASSWORD
      - name: Build
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: |
          mvn -B -ntp package --file pom.xml
      - name: Surefire Report
        if: ${{ always() }}
        uses: ScaCap/action-surefire-report@v1.0.5
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Rename Artifact
        env:
          ARTIFACT_VERSION: ${{ needs.set-variables.outputs.ARTIFACT_VERSION }}
        run: |
          mv target/$APPLICATION_NAME-$ARTIFACT_VERSION.war $ARTIFACT_NAME
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./${{ env.ARTIFACT_NAME }}
          retention-days: 14
  build-and-push-docker-image:
    runs-on: ubuntu-latest
    needs: [set-variables, build-project]
    env:
      FULL_IMAGE_NAME: ${{ needs.set-variables.outputs.FULL_IMAGE_NAME }}
      REGISTRY_SERVER: ${{ secrets.ACR_SERVER }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: ${{ env.ARTIFACT_NAME }}
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      - name: Build docker image
        run: |
          docker build . -t ${{ env.REGISTRY_SERVER }}/${{ env.FULL_IMAGE_NAME }}
      - name: Scan docker image
        uses: azure/container-scan@v0
        with:
          image-name: ${{ env.REGISTRY_SERVER }}/${{ env.FULL_IMAGE_NAME }}
      - name: Push docker image
        run: |
          docker push ${{ env.REGISTRY_SERVER }}/${{ env.FULL_IMAGE_NAME }}
  helm-lint-and-deploy:
    runs-on: ubuntu-latest
    needs: [set-variables, build-and-push-docker-image]
    steps:
      - uses: actions/checkout@v2
      - name: Install OpenVPN
        run: sudo apt install -y openvpn openvpn-systemd-resolved
      - name: Connect to VPN
        uses: "kota65535/github-openvpn-connect-action@v1"
        with:
          config_file: config.ovpn
          username: ${{ secrets.OVPN_USERNAME }}
          password: ${{ secrets.OVPN_PASSWORD }}
      - name: Lint, Package & Push
        uses: WyriHaximus/github-action-helm3@v2
        env:
          ARTIFACT_VERSION: ${{ needs.set-variables.outputs.ARTIFACT_VERSION }}
        with:
          exec: |
            helm lint ${{ env.CHART_PATH }} && \
            helm package --app-version ${{ env.ARTIFACT_VERSION }} --version 0.0.1  --dependency-update ${{ env.CHART_PATH }} -- && \
            helm repo add mi24 ${{ env.CHART_MUSEUM_URL }} && helm repo update && \
            helm plugin install https://github.com/chartmuseum/helm-push.git && \
            helm push ${{ env.APPLICATION_NAME }}-0.0.1.tgz ${{ env.CHART_MUSEUM_URL }} --force
      - name: Deploy
        uses: WyriHaximus/github-action-helm3@v2
        env:
          ARTIFACT_VERSION: ${{ needs.set-variables.outputs.ARTIFACT_VERSION }}
        with:
          kubeconfig: '${{ secrets.KUBECONFIG }}'
          exec: |
            helm upgrade --install --namespace ${{ needs.set-variables.outputs.NAMESPACE }} \
            -f ${{ needs.set-variables.outputs.VALUES }} \
            --set image.tag="${{ env.ARTIFACT_VERSION }}" \
            ${{ needs.set-variables.outputs.RELEASE_NAME }} ${{ env.APPLICATION_NAME }}-0.0.1.tgz